---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Profile">
    <main>
        <h1><span class="text-gradient">Employee Profile</span></h1>
        <form id="profileForm" class="form-container">
            <div class="column">
                <label>
                  First Name:
                  <input type="text" name="firstName" id="firstName" required />
                </label>
                <label>
                  Last Name:
                  <input type="text" name="lastName" id="lastName" required />
                </label>
                <label>
                  Email:
                  <input type="email" name="email" id="email" required />
                </label>
                <label>
                  Phone Number:
                  <input type="text" name="phoneNumber" id="phoneNumber" required />
                </label>
                <label>
                  Personal ID:
                  <input type="text" name="personalID" id="personalID" required />
                </label>
                <label>
                  Address:
                  <input type="text" name="address" id="address" required />
                </label>
                <label>
                  Date of Hire:
                  <input type="text" name="dateofHire" id="dateofHire" required />
                </label>
                <label>
                  Job Title:
                  <input type="text" name="jobTitle" id="jobTitle" required />
                </label>
              </div>
            <div class="button-row">
              <button type="submit">Enviar</button>
            </div>
        </form>
    </main>
</Layout>
<script>
  // ---------------------------- Get user data ----------------------------
  let url = "http://localhost:5000/employee";
  let options = {
    method: "GET",
    headers: {
      "idUser": "ea9e30c320"
    }
  }
  function updateInputFields() {
    // Actualizar los campos de entrada con los valores de userData
    document.getElementById('firstName').value = userData.data.firstName || '';
    document.getElementById('lastName').value = userData.data.lastName || '';
    document.getElementById('email').value = userData.data.email || '';
    document.getElementById('phoneNumber').value = userData.data.phoneNumber || '';
    document.getElementById('personalID').value = userData.data.personalID || '';
    document.getElementById('address').value = userData.data.address || '';
    document.getElementById('dateofHire').value = userData.data.dateofHire || '';
    document.getElementById('jobTitle').value = userData.data.jobTitle || '';
  }

  var userData = {};

  fetch(url, options)
  .then(response => response.json())
  .then(json => {
    userData = json;
    updateInputFields(); // Llamar a la función para actualizar los campos después de obtener userData
  })
  .catch(err => console.warn(err.message));

  // ---------------------------- Update user data ----------------------------
  document.getElementById('profileForm').addEventListener('submit', async function(event) {
  event.preventDefault(); // Previene el envío del formulario por defecto
  // Construye el objeto de usuario a partir de los datos del formulario
  const user = {
    firstName: document.getElementById('firstName').value,
    lastName: document.getElementById('lastName').value,
    email: document.getElementById('email').value,
    phoneNumber: document.getElementById('phoneNumber').value,
    personalID: document.getElementById('personalID').value,
    address: document.getElementById('address').value,
    dateofHire: document.getElementById('dateofHire').value,
    jobTitle: document.getElementById('jobTitle').value
  };
  // Envia la solicitud PUT usando fetch
  let options = {
    method: "PUT",
    headers: {
      "Content-type": "application/json; charset=UTF-8",
      "idUser": "ea9e30c320"
    },
    body: JSON.stringify(user)
  };
  fetch(url, options)
  .then((response) => response.json())
  .then((json) => console.log(json))
  .catch(err => console.warn(err.message));
  });
</script>

<style>
    main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
    h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
    label {
        margin-bottom: 15px; /* Ajusta el espacio entre los labels */
    }
    input {
        padding: 10px; /* Ajusta el padding de los inputs */
        margin-bottom: 15px; /* Ajusta el espacio entre los inputs */
        width: 100%; /* Ajusta el ancho de los inputs */
        box-sizing: border-box; /* Incluye el padding en el ancho del input */
        border-radius: 5px; /* Redondea las esquinas del input */
    }
    .form-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .column {
        display: flex;
        flex-direction: column;
    }
    .button-row {
        display: block;
    }
    .text-gradient {
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }
</style>